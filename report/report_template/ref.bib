@article{ schuhknecht_2014,
	title = {The {Uncracked} {Pieces} in {Database} {Cracking} {Management}},
	volume = {7},
	issn = {2150-8097},
	shorttitle = {The {Uncracked} {Pieces} in {Database} {Cracking} {Management}},
	abstract = {Database cracking has been an area of active research in recent
	years. The core idea of database cracking is to create indexes
	adaptively and incrementally as a side-product of query processing.
	Several works have proposed different cracking techniques
	for different aspects including updates, tuple-reconstruction, convergence,
	concurrency-control, and robustness. However, there is a
	lack of any comparative study of these different methods by an independent
	group. In this paper, we conduct an experimental study
	on database cracking. Our goal is to critically review several aspects,
	identify the potential, and propose promising directions in
	database cracking. With this study, we hope to expand the scope of
	database cracking and possibly leverage cracking in database engines
	other than MonetDB.
	We repeat several prior database cracking works including the
	core cracking algorithms as well as three other works on convergence
	(hybrid cracking), tuple-reconstruction (sideways cracking),
	and robustness (stochastic cracking) respectively. We evaluate
	these works and show possible directions to do even better. We further
	test cracking under a variety of experimental settings, including
	high selectivity queries, low selectivity queries, and multiple
	query access patterns. Finally, we compare cracking against different
	sorting algorithms as well as against different main-memory
	optimised indexes, including the recently proposed Adaptive Radix
	Tree (ART). Our results show that: (i) the previously proposed
	cracking algorithms are repeatable, (ii) there is still enough room to
	significantly improve the previously proposed cracking algorithms,
	(iii) cracking depends heavily on query selectivity, (iv) cracking
	needs to catch up with modern indexing trends, and (v) different
	indexing algorithms have different indexing signatures.},
	number = {2},
	journal = {Proc. VLDB Endow.},
	author = {Schuhknecht, Felix Martin and Jindal, Alekh and Dittrich, Jens},
	month = oct,
	year = {2013},
	pages = {97--108},
}
@inproceedings{idreos_2007,
    author = {Idreos, Stratos and Kersten, Martin L. and Manegold, Stefan},
    title = {Database Cracking},
    booktitle = {CIDR},
    year = {2007},
    pages = {68--78},
}

@inproceedings{kersten_2005,
    author = {Kersten, Martin and Manegold, Stefan},
    title = {Cracking the Database Store},
    booktitle = {CIDR},
    year = {2005}
}

