package minidb;
/**
 * Nodes of the cracker index have: 
 *  - key: value from the CrackerColumn around which the column is partitioned
 *  - data: position (index) of the key in array of values of CrackerColumn
 *  
 *  ******IMPORTANT*****
 *  INVARIANT:
 *  
 *  For given key k and position p in a single index node, we know that
 *  all values whose indices are less than or equal p, have values LESS THAN OR EQUAL k.
 *  
 *  Therefore, if have node (100, 5) and query arrives asking for values <100, we cannot
 *  simple give subarray [0:5] because this array contains values <=100. 
 *  Solution: since we work with integers, we can change the query to <=99.
 *  
 *  
 * @author danamukusheva
 *
 */
public interface CrackerIndex {
	
	/**
	 * Look up the node in the cracker index, get the data(index aka position)
	 * stored in the node; if node not in the index, return -1
	 * @param k value to look up
	 * @return index of the value in the CrackerColumn
	 */
	int findIndexValue(Integer k);
	
	/**
	 * Look up the element that comes right after k, 
	 * return its position in the values array
	 * @param k
	 * @return
	 */
	int findNextGreaterIndex(Integer k);
	
	/**
	 * Add new value to the CrackerIndex as query arrives
	 * if it does not exist in the tree
	 * @param k
	 */
	void addValue(Integer k, int index);
	
	
	void setPositionForExistingValue(Integer k, int index);
	
}
