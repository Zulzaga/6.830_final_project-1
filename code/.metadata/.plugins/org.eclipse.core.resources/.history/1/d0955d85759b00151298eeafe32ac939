package minidb;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * This class represents a Cracker Column, a copy of a regular column
 * that will be partitioned with each range query. 
 * @author danamukusheva
 *
 */
public class CrackerColumn{
	
	public ArrayList<Integer> values;
	public CrackerIndex crackerIndex = new CrackerIndexAVL();
	
	public CrackerColumn(ArrayList<Integer> originalValues){
		this.values = this.copyValues(originalValues);
		
	}
	
	/**
	 * Deep copy all the values into a new array
	 * @param values
	 * @return
	 */
	private ArrayList<Integer> copyValues(ArrayList<Integer> values){
		ArrayList<Integer> newValues = new ArrayList<Integer>();
		//TODO
		return newValues;
		
	}
	
	/**
	 * OpenRange (range is < or > or <= or >=)
	 * Cracking involes:
	 *  - check value in the CrackerIndex
	 *      - if exists, return array (to the left, or to the right, depending on range sign)
	 *      - if doesn't, insert with undefined position, find it, and 
	 *      crack array between the parent and the node, setPosition for the node
	 *      
	 * 
	 */
	public ArrayList<Integer> crack(Integer value, String range){
		//TODO
		return null;
	};


}
