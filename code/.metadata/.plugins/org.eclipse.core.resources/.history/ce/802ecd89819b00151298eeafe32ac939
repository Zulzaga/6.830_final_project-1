package tests;

import static org.junit.Assert.*;
import minidb.CrackerColumn;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import org.junit.Test;

public class CrackingAlgorithms {

	@Test
	public void testCrackInTwoIncl(){
		System.out.println("TEST 1: testCrackInTwoIncl.");
		Integer[] numbers = {10,5,4,7,3,2,6};
		ArrayList<Integer> values = new ArrayList<Integer>(Arrays.asList(numbers));
		
		System.out.println("Values "+values);
		CrackerColumn cIncl = new CrackerColumn(values);
		
		Integer pivot = 5;
		cIncl.crackInTwo(0, values.size()-1, pivot, true);
		cIncl.printValues();
		
		Integer firstGreater = -1;
		int indexFirstGreater = -1;
		for(int i = 0; i< cIncl.getValues().size(); i++){
			Integer val = cIncl.getValues().get(i);
			if(val > pivot){
				firstGreater = val;
				indexFirstGreater = i;
			}
			
		}
		//Test if everything else after first greater is greater than pivot
		for(int i = indexFirstGreater; i< cIncl.getValues().size(); i++){
			Integer val = cIncl.getValues().get(i);
			assert(val > pivot);
		}
		
	}
	
	@Test
	public void testCrackInTwoExcl(){
		System.out.println("TEST 2: testCrackInTwoExcl.");
		Integer[] numbers = {10,5,4,7,3,2,6};
		ArrayList<Integer> values = new ArrayList<Integer>(Arrays.asList(numbers));
		
		System.out.println("Values "+values);
		CrackerColumn cExcl = new CrackerColumn(values);
		
		Integer pivot = 5;
		cExcl.crackInTwo(0, values.size()-1, pivot, true);
		cExcl.printValues();
		
		Integer firstGreater = -1;
		int indexFirstGreater = -1;
		for(int i = 0; i< cExcl.getValues().size(); i++){
			Integer val = cExcl.getValues().get(i);
			if(val > pivot){
				firstGreater = val;
				indexFirstGreater = i;
			}
			
		}
		//Test if everything else after first greater is greater than pivot
		for(int i = indexFirstGreater; i< c.getValues().size(); i++){
			Integer val = cIncl.getValues().get(i);
			assert(val > pivot);
		}
		
	}
	
	@Test
	public void testCrackInTwoRandom() {
		System.out.println("\nTEST 2: testCrackInTwoRandom.");
		int N = 10; // number of elements in the array
		int maxInt = 20; // maximum value in the array
		
		int indexOfPivot = 3; //index of the value that should be used in partition
		
		
		
		Random randomGen = new Random();
		ArrayList<Integer> values = new ArrayList<Integer>();
		for(int i = 0; i<N; i++){
			values.add(randomGen.nextInt(maxInt));
		}
		System.out.println("Generated array: "+values);
		
		Integer pivot = values.get(indexOfPivot);
		System.out.println("Pivot value: "+pivot);
		
		CrackerColumn c = new CrackerColumn(values);
		c.crackInTwo(0, N-1, pivot, true);
		c.printValues();
		
		Integer firstGreater = -1;
		int indexFirstGreater = -1;
		for(int i = 0; i< c.getValues().size(); i++){
			Integer val = c.getValues().get(i);
			if(val > pivot){
				firstGreater = val;
				indexFirstGreater = i;
			}
			
		}
		//Test if everything else after first greater is greater than pivot
		for(int i = indexFirstGreater; i< c.getValues().size(); i++){
			Integer val = c.getValues().get(i);
			assert(val > pivot);
		}
		
	}
	
	

}
