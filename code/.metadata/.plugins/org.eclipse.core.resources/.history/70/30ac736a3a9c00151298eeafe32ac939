package minidb;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

public class SortedColumn implements Column{
	
	public String name;
	public ArrayList<Integer> values = new ArrayList<Integer>();
	
	public SortedColumn(String name){
		this.name = name;
	}

	public String getName() {
		return this.name;
	}

	public Iterator<Integer> getIterator() {
		return values.iterator();
	}

	public boolean useCracking() {
		return false;
	}
	
	/*
	 * Doesn't preserve order
	 * @see minidb.Column#insertTuple(java.lang.Integer, int)
	 */
	public void insertTuple(Integer value, int index) {
		this.values.add(index, value);
		
	}
	/*
	 * Doesn't preserve order, should be called in bulk populating and then sorted
	 * with a separate method
	 * @see minidb.Column#insertTuple(java.lang.Integer)
	 */
	public void insertTuple(Integer value) {
		this.values.add(value);
		
	}
	
	public void sort(boolean useQuickSort){
		
	}
	
	private void sortQuickSort(){
		
	}
	/**
	 * Not sure if useful
	 */
	public void deleteTuple(Integer value, int index) throws Exception {
		if (this.values.get(index) == value){
			this.values.remove(index);
		}
		else{
			throw new Exception("SortedColumn deleteTuple: there is different value at the specified index!");
		}

	}

	/**
	 * Not sure if useful
	 */
	public void deleteTuple(int index) {
		this.values.remove(index);

	}

	public void swap(int index1, int index2) throws Exception {
		if (index1<0 || index1>this.values.size() || index2<0 || index2>this.values.size()){
			throw new Exception("SortedColumn swap: specified index is out of bounds!");
		}
		Collections.swap(this.values,index1,index2);
		
	}
	
	/*
	 * THESE METHODS SHOULD NEVER BE CALLED!
	 * @see minidb.Column#isCracked()
	 */
	
	public boolean isCracked() {
		return false;
	}
		
	public void markCracked() {
	}

	public void markUncracked() {
	}

	public CrackerColumn getCrackerColumn() {
		return null;
	}

	public CrackerIndex getCrackerIndex() {
		return null;
	}

	public void initializeCrackerColumn() {
	}

	public void removeCrackerColumn() {
	}

}
